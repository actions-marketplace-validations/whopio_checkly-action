/**
 * Checkly Public API
 * These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ForbiddenError } from '../model/forbiddenError';
import { Reporting } from '../model/reporting';
import { TooManyRequestsError } from '../model/tooManyRequestsError';
import { UnauthorizedError } from '../model/unauthorizedError';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.checklyhq.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ReportingApiApiKeys {
    Bearer,
}

export class ReportingApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Bearer': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ReportingApiApiKeys, value: string) {
        (this.authentications as any)[ReportingApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Generates a report with aggregated statistics for all checks or a filtered set of checks over a specified time window.
     * @summary Generates a report with aggregate statistics for checks and check groups.
     * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
     * @param from Custom start time of reporting window in unix timestamp format. Setting a custom \&quot;from\&quot; timestamp overrides the use of any \&quot;presetWindow\&quot;.
     * @param to Custom end time of reporting window in unix timestamp format. Setting a custom \&quot;to\&quot; timestamp overrides the use of any \&quot;presetWindow\&quot;.
     * @param presetWindow Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \&quot;to\&quot; and \&quot;from\&quot; timestamp.
     * @param filterByTags Use tags to filter the checks you want to see in your report.
     * @param deactivated Filter checks by activated status.
     */
    public async getV1Reporting (xChecklyAccount?: string, from?: string, to?: string, presetWindow?: 'last24Hrs' | 'last7Days' | 'last30Days' | 'thisWeek' | 'thisMonth' | 'lastWeek' | 'lastMonth', filterByTags?: Array<string>, deactivated?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Reporting>;  }> {
        const localVarPath = this.basePath + '/v1/reporting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(from, "string");
        }

        if (to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(to, "string");
        }

        if (presetWindow !== undefined) {
            localVarQueryParameters['presetWindow'] = ObjectSerializer.serialize(presetWindow, "'last24Hrs' | 'last7Days' | 'last30Days' | 'thisWeek' | 'thisMonth' | 'lastWeek' | 'lastMonth'");
        }

        if (filterByTags !== undefined) {
            localVarQueryParameters['filterByTags'] = ObjectSerializer.serialize(filterByTags, "Array<string>");
        }

        if (deactivated !== undefined) {
            localVarQueryParameters['deactivated'] = ObjectSerializer.serialize(deactivated, "boolean");
        }

        localVarHeaderParams['x-checkly-account'] = ObjectSerializer.serialize(xChecklyAccount, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.Bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.Bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Reporting>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Reporting>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Generates a report with aggregated or non-aggregated statistics for a specific Browser Check over a specified time window.
     * @summary Generates a customizable report for all Browser Check metrics. Allows aggregations like sum and p99. [ALPHA] 
     * @param id 
     * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
     * @param from Custom start time of reporting window in unix timestamp format. Setting a custom \&quot;from\&quot; timestamp overrides the use of any \&quot;presetWindow\&quot;.
     * @param to Custom end time of reporting window in unix timestamp format. Setting a custom \&quot;to\&quot; timestamp overrides the use of any \&quot;presetWindow\&quot;.
     * @param presetWindow Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \&quot;to\&quot; and \&quot;from\&quot; timestamp.
     * @param aggregationInterval The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.
     * @param groupBy Determines how the series data is grouped.
     * @param filterByStatus Use status to filter for check either failing or successful check result data.
     * @param metrics metrics options for browser checks
     */
    public async getV2ReportingBrowserchecksId (id: string, xChecklyAccount?: string, from?: string, to?: string, presetWindow?: 'last24Hours' | 'last7Days' | 'last30Days' | 'thisWeek' | 'thisMonth' | 'lastWeek' | 'lastMonth', aggregationInterval?: number, groupBy?: 'runLocation' | 'pageIndex', filterByStatus?: Array<'success' | 'failure'>, metrics?: Array<'TTFB' | 'FCP' | 'LCP' | 'CLS' | 'TBT' | 'consoleErrors' | 'networkErrors' | 'userScriptErrors' | 'documentErrors' | 'TTFB_avg' | 'TTFB_max' | 'TTFB_median' | 'TTFB_min' | 'TTFB_p90' | 'TTFB_p95' | 'TTFB_p99' | 'TTFB_stddev' | 'TTFB_sum' | 'FCP_avg' | 'FCP_max' | 'FCP_median' | 'FCP_min' | 'FCP_p90' | 'FCP_p95' | 'FCP_p99' | 'FCP_stddev' | 'FCP_sum' | 'LCP_avg' | 'LCP_max' | 'LCP_median' | 'LCP_min' | 'LCP_p90' | 'LCP_p95' | 'LCP_p99' | 'LCP_stddev' | 'LCP_sum' | 'CLS_avg' | 'CLS_max' | 'CLS_median' | 'CLS_min' | 'CLS_p90' | 'CLS_p95' | 'CLS_p99' | 'CLS_stddev' | 'CLS_sum' | 'TBT_avg' | 'TBT_max' | 'TBT_median' | 'TBT_min' | 'TBT_p90' | 'TBT_p95' | 'TBT_p99' | 'TBT_stddev' | 'TBT_sum' | 'consoleErrors_avg' | 'consoleErrors_max' | 'consoleErrors_median' | 'consoleErrors_min' | 'consoleErrors_p90' | 'consoleErrors_p95' | 'consoleErrors_p99' | 'consoleErrors_stddev' | 'consoleErrors_sum' | 'networkErrors_avg' | 'networkErrors_max' | 'networkErrors_median' | 'networkErrors_min' | 'networkErrors_p90' | 'networkErrors_p95' | 'networkErrors_p99' | 'networkErrors_stddev' | 'networkErrors_sum' | 'userScriptErrors_avg' | 'userScriptErrors_max' | 'userScriptErrors_median' | 'userScriptErrors_min' | 'userScriptErrors_p90' | 'userScriptErrors_p95' | 'userScriptErrors_p99' | 'userScriptErrors_stddev' | 'userScriptErrors_sum' | 'documentErrors_avg' | 'documentErrors_max' | 'documentErrors_median' | 'documentErrors_min' | 'documentErrors_p90' | 'documentErrors_p95' | 'documentErrors_p99' | 'documentErrors_stddev' | 'documentErrors_sum'>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/v2/reporting/browser-checks/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getV2ReportingBrowserchecksId.');
        }

        if (from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(from, "string");
        }

        if (to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(to, "string");
        }

        if (presetWindow !== undefined) {
            localVarQueryParameters['presetWindow'] = ObjectSerializer.serialize(presetWindow, "'last24Hours' | 'last7Days' | 'last30Days' | 'thisWeek' | 'thisMonth' | 'lastWeek' | 'lastMonth'");
        }

        if (aggregationInterval !== undefined) {
            localVarQueryParameters['aggregationInterval'] = ObjectSerializer.serialize(aggregationInterval, "number");
        }

        if (groupBy !== undefined) {
            localVarQueryParameters['groupBy'] = ObjectSerializer.serialize(groupBy, "'runLocation' | 'pageIndex'");
        }

        if (filterByStatus !== undefined) {
            localVarQueryParameters['filterByStatus'] = ObjectSerializer.serialize(filterByStatus, "Array<'success' | 'failure'>");
        }

        if (metrics !== undefined) {
            localVarQueryParameters['metrics'] = ObjectSerializer.serialize(metrics, "Array<'TTFB' | 'FCP' | 'LCP' | 'CLS' | 'TBT' | 'consoleErrors' | 'networkErrors' | 'userScriptErrors' | 'documentErrors' | 'TTFB_avg' | 'TTFB_max' | 'TTFB_median' | 'TTFB_min' | 'TTFB_p90' | 'TTFB_p95' | 'TTFB_p99' | 'TTFB_stddev' | 'TTFB_sum' | 'FCP_avg' | 'FCP_max' | 'FCP_median' | 'FCP_min' | 'FCP_p90' | 'FCP_p95' | 'FCP_p99' | 'FCP_stddev' | 'FCP_sum' | 'LCP_avg' | 'LCP_max' | 'LCP_median' | 'LCP_min' | 'LCP_p90' | 'LCP_p95' | 'LCP_p99' | 'LCP_stddev' | 'LCP_sum' | 'CLS_avg' | 'CLS_max' | 'CLS_median' | 'CLS_min' | 'CLS_p90' | 'CLS_p95' | 'CLS_p99' | 'CLS_stddev' | 'CLS_sum' | 'TBT_avg' | 'TBT_max' | 'TBT_median' | 'TBT_min' | 'TBT_p90' | 'TBT_p95' | 'TBT_p99' | 'TBT_stddev' | 'TBT_sum' | 'consoleErrors_avg' | 'consoleErrors_max' | 'consoleErrors_median' | 'consoleErrors_min' | 'consoleErrors_p90' | 'consoleErrors_p95' | 'consoleErrors_p99' | 'consoleErrors_stddev' | 'consoleErrors_sum' | 'networkErrors_avg' | 'networkErrors_max' | 'networkErrors_median' | 'networkErrors_min' | 'networkErrors_p90' | 'networkErrors_p95' | 'networkErrors_p99' | 'networkErrors_stddev' | 'networkErrors_sum' | 'userScriptErrors_avg' | 'userScriptErrors_max' | 'userScriptErrors_median' | 'userScriptErrors_min' | 'userScriptErrors_p90' | 'userScriptErrors_p95' | 'userScriptErrors_p99' | 'userScriptErrors_stddev' | 'userScriptErrors_sum' | 'documentErrors_avg' | 'documentErrors_max' | 'documentErrors_median' | 'documentErrors_min' | 'documentErrors_p90' | 'documentErrors_p95' | 'documentErrors_p99' | 'documentErrors_stddev' | 'documentErrors_sum'>");
        }

        localVarHeaderParams['x-checkly-account'] = ObjectSerializer.serialize(xChecklyAccount, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.Bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.Bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "object");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
