/**
 * Checkly Public API
 * These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CheckAlertSettings } from './checkAlertSettings';
import { EnvironmentVariable } from './environmentVariable';
import { Model1 } from './model1';

export class CheckBrowserUpdate {
    /**
    * The name of the check.
    */
    'name'?: string;
    /**
    * Determines if the check is running or not.
    */
    'activated'?: boolean = true;
    /**
    * Determines if any notifications will be send out when a check fails and/or recovers.
    */
    'muted'?: boolean = false;
    /**
    * Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
    */
    'doubleCheck'?: boolean = true;
    /**
    * Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
    */
    'shouldFail'?: boolean = false;
    /**
    * An array of one or more data center locations where to run this check.
    */
    'locations'?: Array<CheckBrowserUpdate.LocationsEnum>;
    /**
    * Tags for organizing and filtering checks.
    */
    'tags'?: Array<string>;
    'alertSettings'?: CheckAlertSettings;
    /**
    * When true, the account level alert setting will be used, not the alert setting defined on this check.
    */
    'useGlobalAlertSettings'?: boolean = true;
    /**
    * The id of the check group this check is part of.
    */
    'groupId'?: number;
    /**
    * The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
    */
    'groupOrder'?: number;
    /**
    * The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.
    */
    'runtimeId'?: CheckBrowserUpdate.RuntimeIdEnum;
    /**
    * List of alert channel subscriptions.
    */
    'alertChannelSubscriptions'?: Array<Model1>;
    /**
    * Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.
    */
    'environmentVariables'?: Array<EnvironmentVariable>;
    /**
    * How often the check should run in minutes.
    */
    'frequency'?: CheckBrowserUpdate.FrequencyEnum = CheckBrowserUpdate.FrequencyEnum.NUMBER_10;
    /**
    * A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.
    */
    'script'?: string;
    /**
    * An array of one or more private locations where to run the check.
    */
    'privateLocations'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "activated",
            "baseName": "activated",
            "type": "boolean"
        },
        {
            "name": "muted",
            "baseName": "muted",
            "type": "boolean"
        },
        {
            "name": "doubleCheck",
            "baseName": "doubleCheck",
            "type": "boolean"
        },
        {
            "name": "shouldFail",
            "baseName": "shouldFail",
            "type": "boolean"
        },
        {
            "name": "locations",
            "baseName": "locations",
            "type": "Array<CheckBrowserUpdate.LocationsEnum>"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>"
        },
        {
            "name": "alertSettings",
            "baseName": "alertSettings",
            "type": "CheckAlertSettings"
        },
        {
            "name": "useGlobalAlertSettings",
            "baseName": "useGlobalAlertSettings",
            "type": "boolean"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "number"
        },
        {
            "name": "groupOrder",
            "baseName": "groupOrder",
            "type": "number"
        },
        {
            "name": "runtimeId",
            "baseName": "runtimeId",
            "type": "CheckBrowserUpdate.RuntimeIdEnum"
        },
        {
            "name": "alertChannelSubscriptions",
            "baseName": "alertChannelSubscriptions",
            "type": "Array<Model1>"
        },
        {
            "name": "environmentVariables",
            "baseName": "environmentVariables",
            "type": "Array<EnvironmentVariable>"
        },
        {
            "name": "frequency",
            "baseName": "frequency",
            "type": "CheckBrowserUpdate.FrequencyEnum"
        },
        {
            "name": "script",
            "baseName": "script",
            "type": "string"
        },
        {
            "name": "privateLocations",
            "baseName": "privateLocations",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return CheckBrowserUpdate.attributeTypeMap;
    }
}

export namespace CheckBrowserUpdate {
    export enum LocationsEnum {
        UsEast1 = <any> 'us-east-1',
        UsEast2 = <any> 'us-east-2',
        UsWest1 = <any> 'us-west-1',
        UsWest2 = <any> 'us-west-2',
        CaCentral1 = <any> 'ca-central-1',
        SaEast1 = <any> 'sa-east-1',
        EuWest1 = <any> 'eu-west-1',
        EuCentral1 = <any> 'eu-central-1',
        EuWest2 = <any> 'eu-west-2',
        EuWest3 = <any> 'eu-west-3',
        EuNorth1 = <any> 'eu-north-1',
        EuSouth1 = <any> 'eu-south-1',
        MeSouth1 = <any> 'me-south-1',
        ApSoutheast1 = <any> 'ap-southeast-1',
        ApNortheast1 = <any> 'ap-northeast-1',
        ApEast1 = <any> 'ap-east-1',
        ApSoutheast2 = <any> 'ap-southeast-2',
        ApSoutheast3 = <any> 'ap-southeast-3',
        ApNortheast2 = <any> 'ap-northeast-2',
        ApNortheast3 = <any> 'ap-northeast-3',
        ApSouth1 = <any> 'ap-south-1',
        AfSouth1 = <any> 'af-south-1'
    }
    export enum RuntimeIdEnum {
        _202202 = <any> '2022.02',
        _202110 = <any> '2021.10',
        _202106 = <any> '2021.06',
        _202001 = <any> '2020.01'
    }
    export enum FrequencyEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_5 = <any> 5,
        NUMBER_10 = <any> 10,
        NUMBER_15 = <any> 15,
        NUMBER_30 = <any> 30,
        NUMBER_60 = <any> 60,
        NUMBER_120 = <any> 120,
        NUMBER_180 = <any> 180,
        NUMBER_360 = <any> 360,
        NUMBER_720 = <any> 720,
        NUMBER_1440 = <any> 1440
    }
}
