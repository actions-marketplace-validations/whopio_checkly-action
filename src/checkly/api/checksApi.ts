/**
 * Checkly Public API
 * These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { Check } from "../model/check";
import { CheckAPI } from "../model/checkAPI";
import { CheckAPICreate } from "../model/checkAPICreate";
import { CheckAPIUpdate } from "../model/checkAPIUpdate";
import { CheckBrowser } from "../model/checkBrowser";
import { CheckBrowserCreate } from "../model/checkBrowserCreate";
import { CheckBrowserUpdate } from "../model/checkBrowserUpdate";
import { CheckCreate } from "../model/checkCreate";
import { CheckUpdate } from "../model/checkUpdate";
import { ForbiddenError } from "../model/forbiddenError";
import { NotFoundError } from "../model/notFoundError";
import { PaymentRequiredError } from "../model/paymentRequiredError";
import { TooManyRequestsError } from "../model/tooManyRequestsError";
import { UnauthorizedError } from "../model/unauthorizedError";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.checklyhq.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ChecksApiApiKeys {
  Bearer,
}

export class ChecksApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    Bearer: new ApiKeyAuth("header", "Authorization"),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: ChecksApiApiKeys, value: string) {
    (this.authentications as any)[ChecksApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * Permanently removes a API or browser check and all its related status and results data.
   * @summary Delete a check
   * @param id
   */
  public async deleteV1ChecksId(
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/v1/checks/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling deleteV1ChecksId."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Lists all current checks in your account.
   * @summary List all checks
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param limit Limit the number of results
   * @param page Page number
   * @param apiCheckUrlFilterPattern Filters the results by a string contained in the URL of an API check, for instance a domain like \&quot;www.myapp.com\&quot;. Only returns API checks.
   */
  public async getV1Checks(
    xChecklyAccount?: string,
    limit?: number,
    page?: number,
    apiCheckUrlFilterPattern?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<Check> }> {
    const localVarPath = this.basePath + "/v1/checks";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (page !== undefined) {
      localVarQueryParameters["page"] = ObjectSerializer.serialize(
        page,
        "number"
      );
    }

    if (apiCheckUrlFilterPattern !== undefined) {
      localVarQueryParameters["apiCheckUrlFilterPattern"] =
        ObjectSerializer.serialize(apiCheckUrlFilterPattern, "string");
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<Check>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "Array<Check>");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Show details of a specific API or browser check
   * @summary Retrieve a check
   * @param id
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   */
  public async getV1ChecksId(
    id: string,
    xChecklyAccount?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Check }> {
    const localVarPath =
      this.basePath +
      "/v1/checks/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getV1ChecksId."
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Check }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "Check");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * <strong>[DEPRECATED] This endpoint will be removed on Monday 4 July 2022. Instead use <code>POST /checks/api</code> or  <code>POST /checks/browser</code>.</strong> Creates a new API or browser check. Will return a `402` when you are over the limit of your plan.     When using the `globalAlertSettings`, the `alertSettings` can be `null`
   * @summary Create a check
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkCreate
   */
  public async postV1Checks(
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkCreate?: CheckCreate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Check }> {
    const localVarPath = this.basePath + "/v1/checks";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(checkCreate, "CheckCreate"),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Check }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "Check");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Creates a new API check. Will return a `402` when you are over the limit of your plan.     When using the `globalAlertSetting`, the `alertSetting` can be `null`
   * @summary Create an API check
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkAPICreate
   */
  public async postV1ChecksApi(
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkAPICreate?: CheckAPICreate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CheckAPI }> {
    const localVarPath = this.basePath + "/v1/checks/api";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(checkAPICreate, "CheckAPICreate"),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: CheckAPI }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "CheckAPI");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Creates a new browser check. Will return a `402` when you are over the limit of your plan.     When using the `globalAlertSetting`, the `alertSetting` can be `null`
   * @summary Create a browser check
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkBrowserCreate
   */
  public async postV1ChecksBrowser(
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkBrowserCreate?: CheckBrowserCreate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CheckBrowser }> {
    const localVarPath = this.basePath + "/v1/checks/browser";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        checkBrowserCreate,
        "CheckBrowserCreate"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CheckBrowser;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CheckBrowser");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Updates an API check.
   * @summary Update an API check
   * @param id
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkAPIUpdate
   */
  public async putV1ChecksApiId(
    id: string,
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkAPIUpdate?: CheckAPIUpdate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CheckAPI }> {
    const localVarPath =
      this.basePath +
      "/v1/checks/api/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling putV1ChecksApiId."
      );
    }

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PUT",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(checkAPIUpdate, "CheckAPIUpdate"),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: CheckAPI }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "CheckAPI");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Updates a browser check.
   * @summary Update a browser check
   * @param id
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkBrowserUpdate
   */
  public async putV1ChecksBrowserId(
    id: string,
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkBrowserUpdate?: CheckBrowserUpdate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CheckBrowser }> {
    const localVarPath =
      this.basePath +
      "/v1/checks/browser/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling putV1ChecksBrowserId."
      );
    }

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PUT",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        checkBrowserUpdate,
        "CheckBrowserUpdate"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CheckBrowser;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CheckBrowser");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * <strong>[DEPRECATED] This endpoint will be removed on Monday 4 July 2022. Instead use <code>PUT /checks/api/{id}</code> or  <code>PUT /checks/browser/{id}</code>.</strong> Updates a new API or browser check.
   * @summary Update a check
   * @param id
   * @param xChecklyAccount Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general
   * @param autoAssignAlerts Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.
   * @param checkUpdate
   */
  public async putV1ChecksId(
    id: string,
    xChecklyAccount?: string,
    autoAssignAlerts?: boolean,
    checkUpdate?: CheckUpdate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Check }> {
    const localVarPath =
      this.basePath +
      "/v1/checks/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling putV1ChecksId."
      );
    }

    if (autoAssignAlerts !== undefined) {
      localVarQueryParameters["autoAssignAlerts"] = ObjectSerializer.serialize(
        autoAssignAlerts,
        "boolean"
      );
    }

    localVarHeaderParams["x-checkly-account"] = ObjectSerializer.serialize(
      xChecklyAccount,
      "string"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PUT",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(checkUpdate, "CheckUpdate"),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Bearer.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Bearer.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Check }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "Check");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
