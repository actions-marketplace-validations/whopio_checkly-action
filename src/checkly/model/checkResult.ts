/**
 * Checkly Public API
 * These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CheckResultAPI } from './checkResultAPI';
import { CheckResultBrowser } from './checkResultBrowser';

export class CheckResult {
    /**
    * The unique ID of this result.
    */
    'id'?: string;
    /**
    * The name of the check.
    */
    'name'?: string;
    /**
    * The ID of the check.
    */
    'checkId'?: string;
    /**
    * Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true.
    */
    'hasFailures'?: boolean;
    /**
    * Describes if an internal error has occured in Checkly\'s backend. This should be false in almost all cases.
    */
    'hasErrors'?: boolean;
    /**
    * A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.
    */
    'isDegraded'?: boolean;
    /**
    * Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks.
    */
    'overMaxResponseTime'?: boolean;
    /**
    * What data center location this check result originated from.
    */
    'runLocation'?: string;
    'startedAt'?: Date;
    'stoppedAt'?: Date;
    'createdAt'?: Date;
    /**
    * Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.
    */
    'responseTime'?: number;
    'apiCheckResult'?: CheckResultAPI;
    'browserCheckResult'?: CheckResultBrowser;
    /**
    * The id of the specific check run that created this check result.
    */
    'checkRunId'?: number;
    /**
    * How often this check was retried. This will be larger than 0 when double checking is enabled.
    */
    'attempts'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "checkId",
            "baseName": "checkId",
            "type": "string"
        },
        {
            "name": "hasFailures",
            "baseName": "hasFailures",
            "type": "boolean"
        },
        {
            "name": "hasErrors",
            "baseName": "hasErrors",
            "type": "boolean"
        },
        {
            "name": "isDegraded",
            "baseName": "isDegraded",
            "type": "boolean"
        },
        {
            "name": "overMaxResponseTime",
            "baseName": "overMaxResponseTime",
            "type": "boolean"
        },
        {
            "name": "runLocation",
            "baseName": "runLocation",
            "type": "string"
        },
        {
            "name": "startedAt",
            "baseName": "startedAt",
            "type": "Date"
        },
        {
            "name": "stoppedAt",
            "baseName": "stoppedAt",
            "type": "Date"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "responseTime",
            "baseName": "responseTime",
            "type": "number"
        },
        {
            "name": "apiCheckResult",
            "baseName": "apiCheckResult",
            "type": "CheckResultAPI"
        },
        {
            "name": "browserCheckResult",
            "baseName": "browserCheckResult",
            "type": "CheckResultBrowser"
        },
        {
            "name": "checkRunId",
            "baseName": "checkRunId",
            "type": "number"
        },
        {
            "name": "attempts",
            "baseName": "attempts",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CheckResult.attributeTypeMap;
    }
}

